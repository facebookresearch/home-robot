#!/usr/bin/env python
# Copyright (c) Meta Platforms, Inc. and affiliates.
#
# This source code is licensed under the MIT license found in the
# LICENSE file in the root directory of this source tree.


"""
This file is a test for inverse kinematics on the stretch robot. It makes sure we can reach and execute different positions, which have been generated by the grasp planner. It's a useful utility for now.
"""

import click
import numpy as np
import rospy

from home_robot.agent.hierarchical.pick_and_place_agent import PickAndPlaceAgent
from home_robot.core.interfaces import DiscreteNavigationAction
from home_robot_hw.env.stretch_pick_and_place_env import (
    StretchPickandPlaceEnv,
    load_config,
)


@click.command()
@click.option("--reset-nav", default=False, is_flag=True)
def main(reset_nav=False, **kwargs):
    config = load_config(visualize=False, **kwargs)
    rospy.init_node("eval_episode_stretch_objectnav")
    env = StretchPickandPlaceEnv(config=config)
    obs = env.reset("table", "cup", "chair")
    robot = env.get_robot()

    if reset_nav:
        # Send it back to origin position to make testing a bit easier
        robot.nav.navigate_to([0, 0, 0])

    # Test discrete actions
    action = DiscreteNavigationAction.TURN_RIGHT
    print(action)
    env.apply_action(action)
    input("Press enter to continue")

    action = DiscreteNavigationAction.TURN_LEFT
    print(action)
    env.apply_action(action)
    input("Press enter to continue")

    action = DiscreteNavigationAction.MOVE_FORWARD
    print(action)
    env.apply_action(action)
    input("Press enter to continue")

    robot.nav.navigate_to([0, 0, 0])


if __name__ == "__main__":
    main()
