NO_GPU: 0                 # 1: ignore IDs above and run on CPU, 0: run on GPUs with IDs above
NUM_ENVIRONMENTS: 1       # number of environments (per agent process)
DUMP_LOCATION: datadump   # path to dump models and log
EXP_NAME: floorplanner_detic_eval      # experiment name
VISUALIZE: 0              # 1: render observation and predicted semantic map, 0: no visualization
PRINT_IMAGES: 1           # 1: save visualization as images, 0: no image saving
GROUND_TRUTH_SEMANTICS: 0 # 1: use ground-truth semantics (for debugging / ablations)
seed: 0

ENVIRONMENT:
  turn_angle: 10.0        # agent turn angle (in degrees)
  frame_height: 640       # first-person frame height (in pixels)
  frame_width: 480        # first-person frame width (in pixels)
  camera_height: 1.25     # camera sensor height (in metres)
  hfov: 42.0              # horizontal field of view (in degrees)
  min_depth: 0.0          # minimum depth for depth sensor (in metres)
  max_depth: 10.0         # maximum depth for depth sensor (in metres)

AGENT:
  max_steps: 10000         # maximum number of steps before stopping an episode; a lower value set for habitat episode termination 
  panorama_start: 1       # 1: turn around 360 degrees when starting an episode, 0: don't
  exploration_strategy: seen_frontier  # exploration strategy ("seen_frontier", "been_close_to_frontier")
  radius: 0.05            # robot radius (in meters)

  SEMANTIC_MAP:
    semantic_categories: rearrange # map semantic channel categories ("coco_indoor", "longtail_indoor", "mukul_indoor")
    num_sem_categories: 61    # Following 61 categories: ["misc", {25 object categories}, {34 receptacle categories}, "others"]
    map_size_cm: 4800        # global map size (in centimeters)
    map_resolution: 5        # size of map bins (in centimeters)
    vision_range: 100        # diameter of local map region visible by the agent (in cells)
    global_downscaling: 2    # ratio of global over local map
    du_scale: 4              # frame downscaling before projecting to point cloud
    cat_pred_threshold: 1.0  # number of depth points to be in bin to classify it as a certain semantic category
    exp_pred_threshold: 1.0  # number of depth points to be in bin to consider it as explored
    map_pred_threshold: 1.0  # number of depth points to be in bin to consider it as obstacle
    been_close_to_radius: 100  # radius (in centimeters) of been close to region
    explored_radius: 150       # radius (in centimeters) of visually explored region
    must_explore_close: False
    min_obs_height_cm: 10    # minimum height (in centimeters) of obstacle

  PLANNER:
    collision_threshold: 0.20       # forward move distance under which we consider there's a collision (in meters)
    obs_dilation_selem_radius: 3    # radius (in cells) of obstacle dilation structuring element
    goal_dilation_selem_radius: 10  # radius (in cells) of goal dilation structuring element
    step_size: 5                    # maximum distance of the short-term goal selected by the planner
    use_dilation_for_stg: True
    min_obs_dilation_selem_radius: 1    # radius (in cells) of obstacle dilation structuring element
    discrete_actions: True         # discrete motion planner output space or not

  SKILLS:
    PICK:
      type: gaze #end_to_end #modular #hardcoded
      checkpoint_path: data/checkpoints/gaze.pth
      rl_config: projects/habitat_ovmm/configs/agent/gaze_rl.yaml # with continuous actions
      gym_obs_keys:
        - robot_head_depth
        - object_embedding
        - object_segmentation
        - joint
        - is_holding
        - relative_resting_position
      allowed_actions:
        - arm_action
        - base_velocity
      arm_joint_mask: [0, 0, 0, 0, 0, 0, 1] # the arm joints that the policy can control

    NAV_TO_OBJ:
      type: modular

    NAV_TO_REC:
      type: modular

    PLACE:
      type: hardcoded

  skip_nav_to_obj: False
  skip_nav_to_rec: False
  skip_pick: False
  skip_place: False
  skip_orient_obj: False
EVAL_VECTORIZED:
  simulator_gpu_ids: [1, 2, 3, 4, 5, 6, 7] # IDs of GPUs to use for vectorized environments
  specific_episodes: 0      # 1: eval on specific episodes (for debugging), 0: eval on split normally
  goal_on_same_floor: 0     # 1: restrict to episodes with a goal on the same floor as the starting position
  split: val                # eval split
  num_episodes_per_env: 100 # number of eval episodes per environment
  record_videos: 0          # 1: record videos from printed images, 0: don't
  record_planner_videos: 0  # 1: record planner videos (if record videos), 0: don't
